<?php
/**
 * undocumented class
 *
 * @package default
 * @author  
 */
class Rushee extends Person {
	public $type = Person::RUSHEE;
    
    private $initialVars;
    
    public function __construct($data)
    {
        $this->id     = $data['ID'];
        $this->first  = $data['first'];
        $this->last   = $data['last'];
        $this->email  = $data['email'];
        $this->phone  = $data['phone'];
        $this->yog    = $data['class'];
        $this->dob    = new DateTime($data['dob']);
        $this->hiddenData(unserialize($data['data']));
        
        $this->initialVars = $this->getDBArray();
    }
	
	/**
	 * Return the path to the photo of the person
	 * 
	 * @return string
	 */
	function getPhotoPath()
	{
		return file_exists("img/rushpics/$this->id.jpg") ? "/img/rushpics/$this->id.jpg" : "/img/unavailable.jpg";
	}
	/**
	 * Copies a new file to the correct location
	 *
	 * @return void
	 * @author  
	 */
	function moveNewPhoto($file) {
		$finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
    	$mime = finfo_file($finfo, $file);
		finfo_close($finfo);
		if ($mime == 'image/jpeg') {
			return move_uploaded_file($file, "./img/rushpics/$this->id.jpg");
		} else {
			return false;
		}
	}
	/**
	 * undocumented function
	 *
	 * @return void
	 * @author  
	 */
	function getYearName() {
	    if (!$this->yog){
	        return "n/a";
	    }
		$thisYear = new DateTime();
		$thisYear->modify('+6 months');
		$yearsLeft = $this->yog - $thisYear->format('Y');
		$names = array("Senior","Junior","Sophamore","Freshman");
		return $names[$yearsLeft];
	}
    /**
     * Writes changes to the database
     *
     * @return void
     * @author  
     */
    function save() {
        return Query::update('rushees', "`ID`=".$this->id, $this->initialVars, $this->getDBArray());
    }
	/**
	 * Get Rushee by ID
	 *
	 * @return Rushee
	 * @author  
	 */
	static function getRushee($id) {
		$array = self::getRusheesFromQuery("SELECT * FROM rushees WHERE `ID`= $id");
		if (count($array)==1) {
			return $array[0];
		} else {
			throw new Exception("Rushee not found", 1);
		}
	}
	/**
	 * Return array of members generated by SQL Query
	 * 
	 * @param $query string
	 * @return array(Rushee)
	 */
	static function getRusheesFromQuery($query)
	{
		$query = new Query($query);
		if ($query->numRows >= 1) {
			$array = array();
			while($row = $query->nextRow())
			{
				$rushee = new self($row);
				$array[] = $rushee;
			}
			return $array;
		} else {
			throw new Exception();
		}
	}
	/**
	 * undocumented function
	 *
	 * @return Rushee
	 * @author  
	 */
	static function addNew($first,$last,$email="",$owner=NULL) {
	    if(is_null($owner)){
	        $owner = getUser();
	    }
        if($owner instanceof Member){
            $owner = $owner->id;
        }
	    $id = Query::insert(sprintf("INSERT INTO `rushees` (
            `owner` ,`first` ,`last` ,`email`, `data`, `dob`
            ) VALUES (
            '%d','%s','%s','%s','a:0:{}',NULL);",$owner,mysql_escape_string($first),mysql_escape_string($last),mysql_escape_string($email)));
        if ($id) {
            return self::getRushee($id);
        } else {
            throw new Exception("Error creating Rushee", 1);
        }
        
	}
    private function getDBArray()
    {
        return array(
            "first"     => $this->first,
            "last"      => $this->last,
            "email"     => $this->email,
            "phone"     => $this->phone,
            "class"     => $this->yog,
            "dob"       => $this->dob->format('Y-m-d'),
            "data"      => serialize($this->hiddenData())
            );
    }
	
} // END
?>